# Nom Action Github
name: Semgrep.yml
on:
  workflow_call:
    inputs:
      repertoire:
        default: '.'
        required : false
        type: string
      vuln_bloque:
        default: false
        required: false
        type: boolean
      _semgrep:
        default: true
        required: false
        type: boolean
      _contents:
        default: 'read'
        required: false
        type: string
      _actions:
        default: 'read'
        required: false
        type: string
      _id-token:
        default: 'read'
        required: false
        type: string
      _sec-events:
        default: 'write'
        required: false
        type: string
      
permissions:
    contents : inputs._contents
    actions: inputs._actions
    id-token: inputs._id-token
    security-events: inputs._sec-events

 # Scan changed files in PRs (diff-aware scanning):
pull_request: {}
  # Scan on-demand through GitHub Actions interface:
workflow_dispatch: {}
  # Scan mainline branches and report all findings:
push:
  branches: ["main"]

jobs:
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: [self-hosted]
    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: returntocorp/semgrep
    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')
    permissions:
      # required for all workflows
      security-events: inptus._sec-events
      # only required for workflows in private repositories
      actions: inputs._actions
      contents: inputs._contents

    steps:
      # Fetch project source with GitHub Actions Checkout.
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Perform Semgrep Analysis
      # @NOTE: This is the actual semgrep command to scan your code.
      # Modify the --config option to 'r/all' to scan using all rules,
      # or use multiple flags to specify particular rules, such as
      # --config r/all --config custom/rules
        run: semgrep scan -q --sarif --config auto ./vulnerable-source-code > semgrep-results.sarif

      # upload the results for the CodeQL GitHub app to annotate the code
      - name: Save SARIF results as artifact
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-scan-results
          path: semgrep-results.sarif

      # Upload SARIF file generated in previous step
      - name: Upload SARIF result to the GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep-results.sarif
        if: always()
